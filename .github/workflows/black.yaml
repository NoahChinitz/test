name: 'Black Pull Request Check'
on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize

# jobs:
#   black-lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get changed files
#         id: changed-files
#         uses: tj-actions/changed-files@v40
#       - name: List all changed files
#         run: |
#           for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
#             echo "$file was changed"
#           done
# jobs:
#   linter_name:
#     name: runner / black formatter
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#       - run: pip install black
#       - uses: reviewdog/action-black@v3
#         with:
#           github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#           reporter: github-pr-review
#           level: error
#           verbose: 'true'

jobs:
  linter_name:
    name: runner / black formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      # - uses: datadog/action-py-black-formatter@v2.5
      #   id: action_black
      #   with:
      #     print_diff_mode: "true"
      #     only_changed_files: "true"
      #     fail_on_error: "false"
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
      - run: pip install black
      - name: Run Black
        id: run-black
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == *.py ]]; then
              if black $file --diff >> "$GITHUB_OUTPUT" 2>&1; then
                echo "Formatted $file successfully"
              else
                echo "Error encountered while formatting $file"
              fi
            else
              echo "$file is not a python file"
            fi
          done
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{join(steps.run-black.outputs.*, '\n')}}'
            })